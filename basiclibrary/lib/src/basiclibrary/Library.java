/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.ArrayList;
import java.util.Arrays;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {


        /**
         //test roll method
         System.out.println(Arrays.toString(roll(20)));
         */

        /**
         //test containsDuplicates
         int[] testArr = {1,2,3,4,2} ;
         System.out.println(containsDuplicates(testArr));
         */

        /**
         //test calcAverage method
         int[] testArr1 = {1,2,3,4,2};
         System.out.println(calcAverage(testArr1))
         */

        /**
         //test lowestAvg2DArr method
         int[][] testArr2 =   {{66, 64, 58, 65, 71, 57, 60},
                             {57, 65, 65, 70, 72, 65, 51},
                             {55, 54, 60, 53, 59, 57, 61},
                             {65, 56, 55, 52, 55, 62, 57}};
         System.out.println(Arrays.toString(lowestAvg2DArr(testArr2)));
         */




    }

    /**
     *
     * @param n
     * @return
     */
    public static int[] roll(int n){
        int[] rollDice = new int[n] ;
        for(int i = 0 ; i<rollDice.length ; i++){
            rollDice[i] = (int)(Math.random()*6+1);
        }
        return  rollDice ;
    }

    /**
     *
     * @param arr
     * @return
     */
    public static boolean containsDuplicates(int[] arr){
        ArrayList<Integer> testArr = new ArrayList<>() ;
        for(int i  = 0; i < arr.length ; i++){
            testArr.add(arr[i]);
            if(testArr.indexOf(arr[i]) != i ){
                return  true ;
            }

        }
        return false ;
    }

    /**
     *
     * @param arr
     * @return
     */
    public static float calcAverage(int[] arr){
        float sum = 0 ;
        for(int value: arr){
            sum+=value ;
        }
        return  sum / arr.length ;
    }

    /**
     *
     * @param arr
     * @return
     */
    public static int[] lowestAvg2DArr(int[][] arr){
        float sum = 0 ;
        float lowestAvg = 2147483647;
        int indexOfLowestAvgArr = 0 ;
        for(int row = 0 ; row < arr.length ; row++){
            sum = 0 ;
            for (int col = 0 ; col < arr[row].length ; col++){
                sum+=arr[row][col];
            }
            if((sum / arr[row].length) < lowestAvg){
                lowestAvg = sum / arr[row].length ;
                indexOfLowestAvgArr = row ;
            }
        }
        return  arr[indexOfLowestAvgArr] ;
    }

}
